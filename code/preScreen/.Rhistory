posIsAAnewName <- plyr::ldply(strsplit(posIsAA, split = ".", fixed = TRUE) , function(list){c(list[2],list[4])})
featureScreen.MatchvsMismatch(dat_c, alvacMatch, alvacMatchhNewName, "primary", tableDir, figureDir, fileTag)
featureScreen.MatchvsMismatch(dat_c, alvacMatch, alvacMatchNewName, "primary", tableDir, figureDir, fileTag)
get.minvar (n=271, n.vx=138, p=length(alvacMatch[grepl("tier2",alvacMatch)]), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(posIsAA[grepl("tier2",posIsAA)]), fwer=0.05)
#tier1
get.minvar (n=271, n.vx=138, p=length(alvacMatch[grepl("tier1",alvacMatch)]), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(posIsAA[grepl("tier1",posIsAA)]), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(sequon[grepl("tier1",sequon)]), fwer=0.05)
source("~/HVTN702/702sieve/code/preScreen/screenUtils.R")
featureScreen.MatchvsMismatch(dat_c, alvacMatch, alvacMatchNewName, cutoff = c, tableDir, figureDir, "primaryRmatchvsMismatch.csv", "Primary Reference")
c
cutoff = 17
featureScreen.MatchvsMismatch(dat_c, alvacMatch, alvacMatchNewName, cutoff = cutoff, tableDir, figureDir, "primaryRmatchvsMismatch.csv", "Primary Reference")
source("~/HVTN702/702sieve/code/preScreen/screenUtils.R")
featureScreen.MatchvsMismatch(dat_c, alvacMatch, alvacMatchNewName, cutoff = cutoff, tableDir, figureDir, "primaryRmatchvsMismatch.csv", "Primary Reference")
fileName
var
source("~/HVTN702/702sieve/code/preScreen/screenUtils.R")
source("~/HVTN702/702sieve/code/preScreen/screenUtils.R")
featureScreen.MatchvsMismatch(dat_c, alvacMatch, alvacMatchNewName, cutoff = cutoff, tableDir, figureDir, "primaryRmatchvsMismatch.csv", "Primary Reference")
source("~/HVTN702/702sieve/code/preScreen/screenUtils.R")
featureScreen.MatchvsMismatch(dat_c, alvacMatch, alvacMatchNewName, cutoff = cutoff, tableDir, figureDir, "primaryRmatchvsMismatch.csv", "Primary Reference")
source("~/HVTN702/702sieve/code/preScreen/screenUtils.R")
featureScreen.MatchvsMismatch(dat_c, alvacMatch, alvacMatchNewName, cutoff = cutoff, tableDir, figureDir, "primaryRmatchvsMismatch.csv", "Primary Reference")
featureScreen.MatchvsMismatch(dat_c, alvacMatch, alvacMatchNewName, cutoff = cutoff, tableDir, figureDir, "primaryRmatchvsMismatch.csv", "Primary Reference")
featureScreen.MatchvsMismatch(dat_c, c1086match, c1086matchNewName, cutoff = cutoff, tableDir, figureDir, "c1086RmatchvsMismatch.csv", "1086.C")
featureScreen.MatchvsMismatch(dat_c, cTV1match, cTV1matchNewName, cutoff = cutoff, tableDir, figureDir, "cTV1RmatchvsMismatch.csv", "TV1.C")
source("~/HVTN702/702sieve/code/preScreen/screenUtils.R")
featureScreen.MatchvsMismatch(dat_c, alvacMatch, alvacMatchNewName, cutoff = cutoff, tableDir, figureDir, "primaryRmatchvsMismatch.csv", "Primary Reference Match \nvs. Mismatch at position")
featureScreen.MatchvsMismatch(dat_c, c1086match, c1086matchNewName, cutoff = cutoff, tableDir, figureDir, "c1086RmatchvsMismatch.csv", "1086.C Match vs. Mismatch \nat Position")
featureScreen.MatchvsMismatch(dat_c, cTV1match, cTV1matchNewName, cutoff = cutoff, tableDir, figureDir, "cTV1RmatchvsMismatch.csv", "TV1.C Match vs. Mismatch \nat Position")
source("~/HVTN702/702sieve/code/preScreen/screenUtils.R")
featureScreen.MatchvsMismatch(dat_c, alvacMatch, alvacMatchNewName, cutoff = cutoff, tableDir, figureDir, "primaryRmatchvsMismatch.csv", "Primary Reference Match \nvs. Mismatch at position")
featureScreen.MatchvsMismatch(dat_c, c1086match, c1086matchNewName, cutoff = cutoff, tableDir, figureDir, "c1086RmatchvsMismatch.csv", "1086.C Match vs. Mismatch \nat Position")
featureScreen.MatchvsMismatch(dat_c, cTV1match, cTV1matchNewName, cutoff = cutoff, tableDir, figureDir, "cTV1RmatchvsMismatch.csv", "TV1.C Match vs. Mismatch \nat Position")
get.minvar (n=271, n.vx=138, p=length(alvacMatch[grepl("tier2",alvacMatch)]), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(posIsAA[grepl("tier2",posIsAA)]), fwer=0.05)
#tier1
get.minvar (n=271, n.vx=138, p=length(alvacMatch[grepl("tier1",alvacMatch)]), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(posIsAA[grepl("tier1",posIsAA)]), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(sequon[grepl("tier1",sequon)]), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(alvacMatch[grepl("tier1",alvacMatch)]), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(posIsAA[grepl("tier1",posIsAA)]), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(sequon[grepl("tier1",sequon)]), fwer=0.05)
#tier2
get.minvar (n=271, n.vx=138, p=length(alvacMatch[grepl("tier2",alvacMatch)]), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(posIsAA[grepl("tier2",posIsAA)]), fwer=0.05)
7348-2453
145000*7.3
tte <- read_csv(file.path(dataDir, "tte_702.csv"))
sum(tte$MITTFL=="Y")
sum(!dat$SUBJID %in% tte$SUBJID)
sum(! tte$SUBJID %in%  dat$SUBJID )
sum(!tte$SUBJID %in%dat$SUBJID )
source("~/HVTN702/702sieve/code/preScreen/screenUtils.R")
featureScreen.is.aa(dat_c, subPosIsAA, posIsAANewName, cutoff = cutoff, tableDir, figureDir, "residuePresentAbsent.csv", "Amino Acid Present \nvs. Absent nat Position")
featureScreen.is.aa(dat_c, PosIsAA, posIsAANewName, cutoff = cutoff, tableDir, figureDir, "residuePresentAbsent.csv", "Amino Acid Present \nvs. Absent nat Position")
featureScreen.is.aa(dat_c, posIsAA, posIsAANewName, cutoff = cutoff, tableDir, figureDir, "residuePresentAbsent.csv", "Amino Acid Present \nvs. Absent nat Position")
posIsAA <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) &
(!grepl("is.sequon.tier1",colnames(dat)))]
posIsAAnewName <- plyr::ldply(strsplit(posIsAA, split = ".", fixed = TRUE) , function(list){c(list[2],list[4])})
featureScreen.is.aa(dat_c, posIsAA, posIsAANewName, cutoff = cutoff, tableDir, figureDir, "residuePresentAbsent.csv", "Amino Acid Present \nvs. Absent nat Position")
featureScreen.is.aa(dat_c, posIsAA, posIsAAnewName, cutoff = cutoff, tableDir, figureDir, "residuePresentAbsent.csv", "Amino Acid Present \nvs. Absent nat Position")
source("~/HVTN702/702sieve/code/preScreen/screenUtils.R")
featureScreen.is.aa(dat_c, posIsAA, posIsAAnewName, cutoff = cutoff, tableDir, figureDir, "residuePresentAbsent.csv", "Amino Acid Present \nvs. Absent nat Position")
featureScreen.is.aa(dat_c, posIsAA, posIsAAnewName, cutoff = cutoff, tableDir, figureDir, "residuePresentAbsent.csv", "Amino Acid Present \nvs. Absent nat Position")
View(featureData)
posIsAAnewName <- plyr::ldply(strsplit(posIsAA, split = ".", fixed = TRUE) , function(list){paste0(c(list[2],list[4]))})
View(posIsAAnewName)
posIsAAnewName <- plyr::ldply(strsplit(posIsAA, split = ".", fixed = TRUE) , function(list){paste0(c(list[2],list[4]))})
posIsAAnewName
posIsAA <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) &
(!grepl("is.sequon.tier1",colnames(dat)))]
posIsAAnewName <- plyr::ldply(strsplit(posIsAA, split = ".", fixed = TRUE) , function(list){paste0(c(list[2],list[4]))})
posIsAAnewName <- plyr::ldply(strsplit(posIsAA, split = ".", fixed = TRUE) , function(list){paste(c(list[2],list[4]), callapse = TRUE)})
View(posIsPosLedatr)
View(posIsAAnewName)
a = strsplit(posIsAA, split = ".", fixed = TRUE)
a[[1]]
posIsAAnewName <- plyr::laply(strsplit(posIsAA, split = ".", fixed = TRUE) , function(list){paste(c(list[2],list[4]), callapse = TRUE)})
posIsAAnewName <- plyr::laply(strsplit(posIsAA, split = ".", fixed = TRUE) , function(list){paste(c(list[2],list[4]), callapse = TRUE)})
posIsAAnewName <- plyr::laply(strsplit(posIsAA, split = ".", fixed = TRUE) , function(list){paste0(c(list[2],list[4]))})
a[[1]][2]
a[[1]][4]
View(posIsAAnewName)
posIsAAnewName
a[[1]]
paste0(a[[1]][2], a[[1]][4])
posIsAAnewName <- plyr::laply(strsplit(posIsAA, split = ".", fixed = TRUE) , function(list){paste0(list[2],list[4])})
featureScreen.is.aa(dat_c, posIsAA, posIsAAnewName, cutoff = cutoff, tableDir, figureDir, "residuePresentAbsent.csv", "Amino Acid Present \nvs. Absent nat Position")
source("~/HVTN702/702sieve/code/preScreen/screenUtils.R")
featureScreen.is.aa(dat_c, posIsAA, posIsAAnewName, cutoff = cutoff, tableDir, figureDir, "residuePresentAbsent.csv", "Amino Acid Present \nvs. Absent nat Position")
source("~/HVTN702/702sieve/code/preScreen/screenUtils.R")
featureScreen.is.aa(dat_c, posIsAA, posIsAAnewName, cutoff = cutoff, tableDir, figureDir, "residuePresentAbsent.csv", "Amino Acid Present \nvs. Absent nat Position")
featureScreen.MatchvsMismatch(dat_c, alvacMatch, alvacMatchNewName, cutoff = cutoff, tableDir, figureDir, "primaryRmatchvsMismatch", "Primary Reference Match \nvs. Mismatch at position")
featureScreen.MatchvsMismatch(dat_c, c1086match, c1086matchNewName, cutoff = cutoff, tableDir, figureDir, "c1086RmatchvsMismatch", "1086.C Match vs. Mismatch \nat Position")
featureScreen.MatchvsMismatch(dat_c, cTV1match, cTV1matchNewName, cutoff = cutoff, tableDir, figureDir, "cTV1RmatchvsMismatch", "TV1.C Match vs. Mismatch \nat Position")
featureScreen.is.aa(dat_c, posIsAA, posIsAAnewName, cutoff = cutoff, tableDir, figureDir, "residuePresentAbsent", "Amino Acid Present vs.\nAbsent at Position")
source("~/HVTN702/702sieve/code/preScreen/screenUtils.R")
featureScreen.sequon(dat_c, seqonAbsence, seqonAbsenceNewName, cutoff = cutoff, tableDir, figureDir, "sequonPresentAbsent", "Presence vs. Absence of a Sequon")
sequon <- colnames(dat)[grepl("is.sequon.tier1",colnames(dat))]
seqonAbsenceNewName <- plyr::laply(strsplit(sequon, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
sequon <- colnames(dat)[grepl("is.sequon.tier1",colnames(dat))]
seqonNewName <- plyr::laply(strsplit(sequon, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
featureScreen.sequon(dat_c, seqon, seqonNewName, cutoff = cutoff, tableDir, figureDir, "sequonPresentAbsent", "Presence vs. Absence of a Sequon")
sequon <- colnames(dat)[grepl("is.sequon.tier1",colnames(dat))]
sequonNewName <- plyr::laply(strsplit(sequon, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
featureScreen.sequon(dat_c, sequon, sequonNewName, cutoff = cutoff, tableDir, figureDir, "sequonPresentAbsent", "Presence vs. Absence of a Sequon")
sequon
featureScreen.is.aa(dat_c, sequon, sequonNewName, cutoff = cutoff, tableDir, figureDir, "sequonPresentAbsent", "Presence vs. Absence of a Sequon")
featureScreen.is.aa(dat_c, sequon, sequonNewName, cutoff = cutoff, tableDir, figureDir, "sequonPresentAbsent", "Presence vs. Absence of a Sequon\nat Position")
featureScreen.is.aa(dat_c, sequon, sequonNewName, cutoff = cutoff, tableDir, figureDir, "sequonPresentAbsent", "Presence vs. Absence of a Sequon\nStarting at Position")
alvacMatchScreenedIn <- read.csv(file.path(tableDir, paste0("primaryRmatchvsMismatch",".csv")))
c1086matchScreenedIn <- read.csv(file.path(tableDir, paste0("c1086RmatchvsMismatch",".csv")))
cTV1matchScreenedIn <- read.csv(file.path(tableDir, paste0("cTV1RmatchvsMismatch",".csv")))
matchScreenedIn <- rbind(C97ZAposScreenedIn, Mos1posScreenedIn, Mos2posScreenedIn)
alvacMatchScreenedIn <- read.csv(file.path(tableDir, paste0("primaryRmatchvsMismatch",".csv")))
c1086matchScreenedIn <- read.csv(file.path(tableDir, paste0("c1086RmatchvsMismatch",".csv")))
cTV1matchScreenedIn <- read.csv(file.path(tableDir, paste0("cTV1RmatchvsMismatch",".csv")))
matchScreenedIn <- rbind(alvacMatchScreenedIn, c1086matchScreenedIn, cTV1matchScreenedIn)
posScreenedIn$Insert <- c("96ZM651.C + LAI.B ", "1086.C ", "TV1.C" )
alvacMatchScreenedIn <- read.csv(file.path(tableDir, paste0("primaryRmatchvsMismatch",".csv")))
c1086matchScreenedIn <- read.csv(file.path(tableDir, paste0("c1086RmatchvsMismatch",".csv")))
cTV1matchScreenedIn <- read.csv(file.path(tableDir, paste0("cTV1RmatchvsMismatch",".csv")))
matchScreenedIn <- rbind(alvacMatchScreenedIn, c1086matchScreenedIn, cTV1matchScreenedIn)
matchScreenedIn$Insert <- c("96ZM651.C + LAI.B ", "1086.C ", "TV1.C" )
write.csv(matchScreenedIn, file.path(tableDir, paste0("matchVsMismatchScreenedIn",".csv")),row.names=FALSE)
matchScreenedIn <- rbind(alvacMatchScreenedIn, c1086matchScreenedIn, cTV1matchScreenedIn)
matchScreenedIn <- data.frame(insert = c("96ZM651.C + LAI.B ", "1086.C ", "TV1.C" ), matchScreenedIn)
matchScreenedIn
write.csv(matchScreenedIn, file.path(tableDir, paste0("matchVsMismatchScreenedIn",".csv")),row.names=FALSE)
# Purpose: Westfall and Young permutation-based multiplicity adjustment for sieve test p-values
#          The SAP states that p-values are calculated for the vaccine vs. placebo comparison.
# Method:  Westfall and Young (1993)
#          Juraska and Gilbert (Biometrics, 2013)
#          R package sievePH, version 1.0.1 on CRAN
#          Lunn and McNeil (1995)
# Input:   702 primary endpoints,  sequence features specified in the sieve SAP that are to be adjusted in multiple comparison
# Output:  A list with each component being a vector of sieve test p-values for the analyzed marks from a single permutation of the mark variable.
# Author:  Li Li
rm(list=ls(all=TRUE))
#p.adj.perm2 needs update
# Setting directory paths -------------------------------------------------
library(here)
rm(list=ls(all=TRUE))
here::i_am("702sieve/rootDir.R")
repoDir <- here::here()
dataDir <- file.path(repoDir, "data")
codeDir <- file.path(repoDir, "702sieve/code/westfallYoung")
outputDir <- file.path(repoDir, "702sieve/code/westfallYoung/output")
figureDir <- file.path(repoDir, "702sieve/figures/westfallYoung")
tableDir <- file.path(repoDir, "702sieve/tables/westfallYoung")
source(file.path(codeDir,"lunnMcneil.R"))
source(file.path(codeDir,"p.adj.perm2.R"))
library(sievePH)
library(tidyverse)
library(plyr)
# Purpose: Westfall and Young permutation-based multiplicity adjustment for sieve test p-values
#          The SAP states that p-values are calculated for the vaccine vs. placebo comparison.
# Method:  Westfall and Young (1993)
#          Juraska and Gilbert (Biometrics, 2013)
#          R package sievePH, version 1.0.1 on CRAN
#          Lunn and McNeil (1995)
# Input:   702 primary endpoints,  sequence features specified in the sieve SAP that are to be adjusted in multiple comparison
# Output:  A list with each component being a vector of sieve test p-values for the analyzed marks from a single permutation of the mark variable.
# Author:  Li Li
rm(list=ls(all=TRUE))
#p.adj.perm2 needs update
# Setting directory paths -------------------------------------------------
library(here)
rm(list=ls(all=TRUE))
here::i_am("702sieve/rootDir.R")
repoDir <- here::here()
dataDir <- file.path(repoDir, "data")
codeDir <- file.path(repoDir, "702sieve/code/westfallYoung")
outputDir <- file.path(repoDir, "702sieve/code/westfallYoung/output")
figureDir <- file.path(repoDir, "702sieve/figures/westfallYoung")
tableDir <- file.path(repoDir, "702sieve/tables/westfallYoung")
source(file.path(codeDir,"lunnMcneil.R"))
source(file.path(codeDir,"p.adj.perm2.R"))
library(sievePH)
library(tidyverse)
library(plyr)
####################################################################################
#this section of code is the same with sieveBinaryMain.R
source(file.path(repoDir, "702sieve/code/common.R"))
dat <- read_csv(file.path(dataDir, datFile))
View(dat)
table(dat$transmitted.founder.status.tier2)
sieveData <- read.csv(file.path(dataDir, datFile)) %>%
mutate(tx=as.numeric(TRT01P=="T1"),
lineageLabel = as.numeric(transmitted.founder.status.tier2=="multi"),
eventTime = HIV24fu,
eventInd = HIV24)
table(sieveData$lineageLabel)
sieveData <- read.csv(file.path(dataDir, datFile)) %>%
mutate(tx=as.numeric(TRT01P=="T1"),
lineageLabel = as.numeric(transmitted.founder.status.tier2=="Multi"),
eventTime = HIV24fu,
eventInd = HIV24)
table(sieveData$lineageLabel)
hdist.zspace <- colnames(sieveData)[grepl("hdist.zspace",colnames(sieveData))]
hdist.zspace
numSequon <- colnames(dat)[grepl("num.sequons",colnames(dat))]
numSequon
table(sieveData$num.sequons.V1.tier1)
lengthHypervariable <- colnames(dat)[grepl("length.hypervariable",colnames(dat))]
lengthHypervariable
charge <- colnames(dat)[grepl("charge",colnames(dat))]
charge
cysteineCount <- colnames(dat)[grepl("cysteine.count",colnames(dat))]
cysteineCount
alvacMatchScreenedIn <- read.csv(file.path(tableDir, paste0("varprimaryRmatchvsMismatch",".csv")))
repoDir
alvacMatchScreenedIn <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varprimaryRmatchvsMismatch",".csv")))
c1086matchScreenedIn <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varc1086RmatchvsMismatch",".csv")))
cTV1matchScreenedIn <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varcTV1RmatchvsMismatch",".csv")))
alvacMatchScreenedIn <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varprimaryRmatchvsMismatch",".csv")))
c1086matchScreenedIn <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varc1086RmatchvsMismatch",".csv")))
cTV1matchScreenedIn <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varcTV1RmatchvsMismatch",".csv")))
residueScreenedIn <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varresiduePresentAbsent",".csv")))
sequonScreenedIn <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varsequonPresentAbsent",".csv")))
alvacMatch.tier1 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier1",colnames(dat))]
alvacMatch.tier1NewName <- plyr::laply(strsplit(alvacMatch.tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
c1086match.tier1 <- colnames(dat)[grepl("1mer.1086.match.tier1",colnames(dat))]
c1086match.tier1NewName <- plyr::laply(strsplit(c1086match.tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
cTV1match.tier1 <- colnames(dat)[grepl("1mer.TV1.match.tier1",colnames(dat))]
cTV1match.tier1NewName <- plyr::laply(strsplit(cTV1match.tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
alvacMatch.tier1
posIsAA.tier1
posIsAA.tier1 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) &(!grepl("is.sequon.tier1",colnames(dat)))]
posIsAAnewName.tier1 <- plyr::laply(strsplit(posIsAA, split = ".", fixed = TRUE) , function(list){paste0(list[2],list[4])})
posIsAA.tier1 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) &(!grepl("is.sequon.tier1",colnames(dat)))]
posIsAAnewName.tier1 <- plyr::laply(strsplit(posIsAA.tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2],list[4])})
posIsAA.tier1
posIsAA.tier1 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier1",colnames(dat)) &(!grepl("is.sequon.tier1",colnames(dat)))]
posIsAAnewName.tier1 <- plyr::laply(strsplit(posIsAA.tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2],list[4])})
posIsAA.tier1
alvacMatch.tier2 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier2",colnames(dat))]
alvacMatch.tier2NewName <- plyr::laply(strsplit(alvacMatch.tier2, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
c1086match.tier2 <- colnames(dat)[grepl("1mer.1086.match.tier2",colnames(dat))]
c1086match.tier2NewName <- plyr::laply(strsplit(c1086match.tier2, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
cTV1match.tier2 <- colnames(dat)[grepl("1mer.TV1.match.tier2",colnames(dat))]
cTV1match.tier2NewName <- plyr::laply(strsplit(cTV1match.tier2, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
posIsAA.tier2 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier2",colnames(dat)) &(!grepl("is.sequon.tier2",colnames(dat)))]
posIsAAnewName.tier2 <- plyr::laply(strsplit(posIsAA.tier2, split = ".", fixed = TRUE) , function(list){paste0(list[2],list[4])})
posIsAA.tier2
alvacMatch.tier1 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier1",colnames(dat))]
alvacMatchNewName.tier1 <- plyr::laply(strsplit(alvacMatch.tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
c1086match.tier1 <- colnames(dat)[grepl("1mer.1086.match.tier1",colnames(dat))]
c1086matchNewName.tier1 <- plyr::laply(strsplit(c1086match.tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
cTV1match.tier1 <- colnames(dat)[grepl("1mer.TV1.match.tier1",colnames(dat))]
cTV1matchNewName.tier1 <- plyr::laply(strsplit(cTV1match.tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
posIsAA.tier1 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier1",colnames(dat)) &(!grepl("is.sequon.tier1",colnames(dat)))]
posIsAAnewName.tier1 <- plyr::laply(strsplit(posIsAA.tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2],list[4])})
alvacMatch.tier2 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier2",colnames(dat))]
alvacMatchNewName.tier2 <- plyr::laply(strsplit(alvacMatch.tier2, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
c1086match.tier2 <- colnames(dat)[grepl("1mer.1086.match.tier2",colnames(dat))]
c1086matchNewName.tier2 <- plyr::laply(strsplit(c1086match.tier2, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
cTV1match.tier2 <- colnames(dat)[grepl("1mer.TV1.match.tier2",colnames(dat))]
cTV1matchNewName.tier2 <- plyr::laply(strsplit(cTV1match.tier2, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
posIsAA.tier2 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier2",colnames(dat)) &(!grepl("is.sequon.tier2",colnames(dat)))]
posIsAAnewName.tier2 <- plyr::laply(strsplit(posIsAA.tier2, split = ".", fixed = TRUE) , function(list){paste0(list[2],list[4])})
sequon.tier1 <- colnames(dat)[grepl("is.sequon.tier1",colnames(dat))]
sequonNewName.tier1 <- plyr::laply(strsplit(sequon.tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
source("~/HVTN702/702sieve/code/preScreen/screenMain.R")
#tier1
get.minvar (n=271, n.vx=138, p=length(alvacMatch_tier1), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(posIsAA_tier1), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(sequon_tier1), fwer=0.05)
#tier2
get.minvar (n=271, n.vx=138, p=length(alvacMatch_tier2), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(posIsAA_tier2), fwer=0.05)
#number of founders
num.of.founder <- dat_c$transmitted.founder.status_tier2
cutoff = 17
featureScreen.MatchvsMismatch(dat_c, alvacMatch_tier1, alvacMatchNewName_tier1, cutoff = cutoff, tableDir, figureDir, "primaryRmatchvsMismatch_tier1", "Primary Reference Match\nvs. Mismatch at position")
featureScreen.MatchvsMismatch(dat_c, c1086match_tier1, c1086matchNewName_tier1, cutoff = cutoff, tableDir, figureDir, "c1086RmatchvsMismatch_tier1", "1086.C Match vs. Mismatch\nat Position")
featureScreen.MatchvsMismatch(dat_c, cTV1match_tier1, cTV1matchNewName_tier1, cutoff = cutoff, tableDir, figureDir, "cTV1RmatchvsMismatch_tier1", "TV1.C Match vs. Mismatch\nat Position")
featureScreen.presentVsAbsent(dat_c, posIsAA_tier1, posIsAAnewName_tier1, cutoff = cutoff, tableDir, figureDir, "residuePresentAbsent", "Amino Acid Present vs.\nAbsent at Position")
featureScreen.MatchvsMismatch(dat_c, alvacMatch_tier2, alvacMatchNewName_tier2, cutoff = cutoff, tableDir, figureDir, "primaryRmatchvsMismatch_tier2", "Primary Reference Match\nvs. Mismatch at position")
featureScreen.MatchvsMismatch(dat_c, c1086match_tier2, c1086matchNewName_tier2, cutoff = cutoff, tableDir, figureDir, "c1086RmatchvsMismatch_tier2", "1086.C Match vs. Mismatch\nat Position")
featureScreen.MatchvsMismatch(dat_c, cTV1match_tier2, cTV1matchNewName_tier2, cutoff = cutoff, tableDir, figureDir, "cTV1RmatchvsMismatch_tier2", "TV1.C Match vs. Mismatch\nat Position")
featureScreen.presentVsAbsent(dat_c, posIsAA_tier2, posIsAAnewName_tier2, cutoff = cutoff, tableDir, figureDir, "residuePresentAbsent", "Amino Acid Present vs.\nAbsent at Position")
featureScreen.presentVsAbsent(dat_c, sequon_tier1, sequonNewName_tier1, cutoff = cutoff, tableDir, figureDir, "sequonPresentAbsent", "Presence vs. Absence of a Sequon\nStarting at Position")
alvacMatchScreenedIn <- read.csv(file.path(tableDir, paste0("primaryRmatchvsMismatch_tier1",".csv")))
c1086matchScreenedIn <- read.csv(file.path(tableDir, paste0("c1086RmatchvsMismatch_tier1",".csv")))
cTV1matchScreenedIn <- read.csv(file.path(tableDir, paste0("cTV1RmatchvsMismatch_tier1",".csv")))
matchScreenedIn <- rbind(alvacMatchScreenedIn, c1086matchScreenedIn, cTV1matchScreenedIn)
matchScreenedIn <- data.frame(insert = c("96ZM651.C + LAI.B ", "1086.C ", "TV1.C" ), matchScreenedIn)
write.csv(matchScreenedIn, file.path(tableDir, paste0("matchVsMismatchScreenedIn_tier1",".csv")),row.names=FALSE)
alvacMatchScreenedIn <- read.csv(file.path(tableDir, paste0("primaryRmatchvsMismatch_tier2",".csv")))
c1086matchScreenedIn <- read.csv(file.path(tableDir, paste0("c1086RmatchvsMismatch_tier2",".csv")))
cTV1matchScreenedIn <- read.csv(file.path(tableDir, paste0("cTV1RmatchvsMismatch_tier2",".csv")))
matchScreenedIn <- rbind(alvacMatchScreenedIn, c1086matchScreenedIn, cTV1matchScreenedIn)
matchScreenedIn <- data.frame(insert = c("96ZM651.C + LAI.B ", "1086.C ", "TV1.C" ), matchScreenedIn)
write.csv(matchScreenedIn, file.path(tableDir, paste0("matchVsMismatchScreenedIn_tier2",".csv")),row.names=FALSE)
hdist.zspace_tier1 <- colnames(sieveData)[grepl("hdist.zspace",colnames(sieveData)) & grepl("tier1",colnames(sieveData))]
# Purpose: Westfall and Young permutation-based multiplicity adjustment for sieve test p-values
#          The SAP states that p-values are calculated for the vaccine vs. placebo comparison.
# Method:  Westfall and Young (1993)
#          Juraska and Gilbert (Biometrics, 2013)
#          R package sievePH, version 1.0.1 on CRAN
#          Lunn and McNeil (1995)
# Input:   702 primary endpoints,  sequence features specified in the sieve SAP that are to be adjusted in multiple comparison
# Output:  A list with each component being a vector of sieve test p-values for the analyzed marks from a single permutation of the mark variable.
# Author:  Li Li
rm(list=ls(all=TRUE))
#p.adj.perm2 needs update
# Setting directory paths -------------------------------------------------
library(here)
rm(list=ls(all=TRUE))
here::i_am("702sieve/rootDir.R")
repoDir <- here::here()
dataDir <- file.path(repoDir, "data")
codeDir <- file.path(repoDir, "702sieve/code/westfallYoung")
outputDir <- file.path(repoDir, "702sieve/code/westfallYoung/output")
figureDir <- file.path(repoDir, "702sieve/figures/westfallYoung")
tableDir <- file.path(repoDir, "702sieve/tables/westfallYoung")
source(file.path(codeDir,"lunnMcneil.R"))
source(file.path(codeDir,"p.adj.perm2.R"))
library(sievePH)
library(tidyverse)
library(plyr)
####################################################################################
#this section of code is the same with sieveBinaryMain.R
source(file.path(repoDir, "702sieve/code/common.R"))
sieveData <- read.csv(file.path(dataDir, datFile)) %>%
mutate(tx=as.numeric(TRT01P=="T1"),
lineageLabel = as.numeric(transmitted.founder.status.tier2=="Multi"),
eventTime = HIV24fu,
eventInd = HIV24)
alvacMatch_tier1 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier1",colnames(dat))]
dat <- read.csv(file.path(dataDir, datFile)) %>%
mutate(tx=as.numeric(TRT01P=="T1"),
lineageLabel = as.numeric(transmitted.founder.status.tier2=="Multi"),
eventTime = HIV24fu,
eventInd = HIV24)
alvacMatch_tier1 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier1",colnames(dat))]
c1086match_tier1 <- colnames(dat)[grepl("1mer.1086.match.tier1",colnames(dat))]
cTV1match_tier1 <- colnames(dat)[grepl("1mer.TV1.match.tier1",colnames(dat))]
posIsAA_tier1 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier1",colnames(dat)) &(!grepl("is.sequon.tier1",colnames(dat)))]
alvacMatch_tier2 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier2",colnames(dat))]
c1086match_tier2 <- colnames(dat)[grepl("1mer.1086.match.tier2",colnames(dat))]
cTV1match_tier2 <- colnames(dat)[grepl("1mer.TV1.match.tier2",colnames(dat))]
posIsAA_tier2 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier2",colnames(dat)) &(!grepl("is.sequon.tier2",colnames(dat)))]
sequon_tier1 <- colnames(dat)[grepl("is.sequon.tier1",colnames(dat))]
numSequon_tier1 <- colnames(dat)[grepl("num.sequons",colnames(dat))]
lengthHypervariable_tier1 <- colnames(dat)[grepl("length.hypervariable",colnames(dat))]
electrochemicalCharge_tier1 <- colnames(dat)[grepl("charge",colnames(dat))]
cysteineCount_tier1 <- colnames(dat)[grepl("cysteine.count",colnames(dat))]
hdist.zspace_tier1 <- colnames(sieveData)[grepl("hdist.zspace",colnames(sieveData)) & grepl("tier1",colnames(sieveData))]
hdist.zspace_tier2 <- colnames(sieveData)[grepl("hdist.zspace",colnames(sieveData)) & grepl("tier2",colnames(sieveData))]
hdist.zspace_tier1
hdist.zspace_tier2
alvacMatchScreenedIn_tier1 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varprimaryRmatchvsMismatch_tier1",".csv")))
c1086matchScreenedIn_tier1 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varc1086RmatchvsMismatch_tier1",".csv")))
cTV1matchScreenedIn_tier1 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varcTV1RmatchvsMismatch_tier1",".csv")))
residueScreenedIn_tier1 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varresiduePresentAbsent_tier1",".csv")))
source("~/HVTN702/702sieve/code/preScreen/screenMain.R")
# Purpose: Westfall and Young permutation-based multiplicity adjustment for sieve test p-values
#          The SAP states that p-values are calculated for the vaccine vs. placebo comparison.
# Method:  Westfall and Young (1993)
#          Juraska and Gilbert (Biometrics, 2013)
#          R package sievePH, version 1.0.1 on CRAN
#          Lunn and McNeil (1995)
# Input:   702 primary endpoints,  sequence features specified in the sieve SAP that are to be adjusted in multiple comparison
# Output:  A list with each component being a vector of sieve test p-values for the analyzed marks from a single permutation of the mark variable.
# Author:  Li Li
rm(list=ls(all=TRUE))
#p.adj.perm2 needs update
# Setting directory paths -------------------------------------------------
library(here)
rm(list=ls(all=TRUE))
here::i_am("702sieve/rootDir.R")
repoDir <- here::here()
dataDir <- file.path(repoDir, "data")
codeDir <- file.path(repoDir, "702sieve/code/westfallYoung")
outputDir <- file.path(repoDir, "702sieve/code/westfallYoung/output")
figureDir <- file.path(repoDir, "702sieve/figures/westfallYoung")
tableDir <- file.path(repoDir, "702sieve/tables/westfallYoung")
source(file.path(codeDir,"lunnMcneil.R"))
source(file.path(codeDir,"p.adj.perm2.R"))
library(sievePH)
library(tidyverse)
library(plyr)
####################################################################################
#this section of code is the same with sieveBinaryMain.R
source(file.path(repoDir, "702sieve/code/common.R"))
dat <- read.csv(file.path(dataDir, datFile)) %>%
mutate(tx=as.numeric(TRT01P=="T1"),
lineageLabel = as.numeric(transmitted.founder.status.tier2=="Multi"),
eventTime = HIV24fu,
eventInd = HIV24)
alvacMatch_tier1 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier1",colnames(dat))]
c1086match_tier1 <- colnames(dat)[grepl("1mer.1086.match.tier1",colnames(dat))]
cTV1match_tier1 <- colnames(dat)[grepl("1mer.TV1.match.tier1",colnames(dat))]
posIsAA_tier1 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier1",colnames(dat)) &(!grepl("is.sequon.tier1",colnames(dat)))]
alvacMatch_tier2 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier2",colnames(dat))]
c1086match_tier2 <- colnames(dat)[grepl("1mer.1086.match.tier2",colnames(dat))]
cTV1match_tier2 <- colnames(dat)[grepl("1mer.TV1.match.tier2",colnames(dat))]
posIsAA_tier2 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier2",colnames(dat)) &(!grepl("is.sequon.tier2",colnames(dat)))]
sequon_tier1 <- colnames(dat)[grepl("is.sequon.tier1",colnames(dat))]
numSequon_tier1 <- colnames(dat)[grepl("num.sequons",colnames(dat))]
lengthHypervariable_tier1 <- colnames(dat)[grepl("length.hypervariable",colnames(dat))]
electrochemicalCharge_tier1 <- colnames(dat)[grepl("charge",colnames(dat))]
cysteineCount_tier1 <- colnames(dat)[grepl("cysteine.count",colnames(dat))]
hdist.zspace_tier1 <- colnames(sieveData)[grepl("hdist.zspace",colnames(sieveData)) & grepl("tier1",colnames(sieveData))]
hdist.zspace_tier1 <- colnames(dat)[grepl("hdist.zspace",colnames(dat)) & grepl("tier1",colnames(dat))]
hdist.zspace_tier2 <- colnames(dat)[grepl("hdist.zspace",colnames(dat)) & grepl("tier2",colnames(dat))]
hdist.zspace_tier2
alvacMatchScreenedIn_tier1 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varprimaryRmatchvsMismatch_tier1",".csv")))
c1086matchScreenedIn_tier1 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varc1086RmatchvsMismatch_tier1",".csv")))
cTV1matchScreenedIn_tier1 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varcTV1RmatchvsMismatch_tier1",".csv")))
residueScreenedIn_tier1 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varresiduePresentAbsent_tier1",".csv")))
sequonScreenedIn <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varsequonPresentAbsent_tier1",".csv")))
alvacMatchScreenedIn_tier2 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varprimaryRmatchvsMismatch_tier2",".csv")))
alvacMatchScreenedIn_tier2 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varprimaryRmatchvsMismatch_tier2",".csv")))
c1086matchScreenedIn_tier2 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varc1086RmatchvsMismatch_tier2",".csv")))
cTV1matchScreenedIn_tier2 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varcTV1RmatchvsMismatch_tier2",".csv")))
residueScreenedIn_tier2 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varresiduePresentAbsent_tier2",".csv")))
alvacMatchScreenedIn_tier1 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varprimaryRmatchvsMismatch_tier1",".csv")))
c1086matchScreenedIn_tier1 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varc1086RmatchvsMismatch_tier1",".csv")))
cTV1matchScreenedIn_tier1 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varcTV1RmatchvsMismatch_tier1",".csv")))
residueScreenedIn_tier1 <- read.csv(file.path(repoDir, paste0("702sieve/tables/preScreen/varresiduePresentAbsent_tier1",".csv")))
residueScreenedIn_tier2
numSequon_tier1
lengthHypervariable_tier1
cysteineCount_tier1
electrochemicalCharge_tier1
table(dat$charge.V1V2.tier1)
# Setting directory paths -------------------------------------------------
rm(list=ls(all=TRUE))
here::i_am("702sieve/rootDir.R")
repoDir <- here::here()
dataDir <- file.path(repoDir, "data")
codeDir <- file.path(repoDir, "702sieve/code/preScreen")
outputDir <- file.path(repoDir, "702sieve/code/preScreen/output")
figureDir <- file.path(repoDir, "702sieve/figures/preScreen")
tableDir <- file.path(repoDir, "702sieve/tables/preScreen")
library(tidyverse)
library(plyr)
source(file.path(codeDir, "screenUtils.R"))
source(file.path(codeDir, "get_minvar.R"))
source(file.path(repoDir, "702sieve/code/common.R"))
dat <- read_csv(file.path(dataDir, datFile))
dat$subjid <- dat$SUBJID
dat$armdesc <- ifelse(dat$TRT01P == "T1", "Vaccine", "Placebo")
dat$hiv1event <- dat$HIV24
tte <- read_csv(file.path(dataDir, "tte_702.csv"))
dat_c <- filter(dat, HIV24==1&!is.na("hxb2.1.1mer.96ZM651.match_tier2"))
alvacMatch_tier1 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier1",colnames(dat))]
alvacMatch_tier1
alvacMatch_tier2 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier2",colnames(dat))]
alvacMatch_tier2
posIsAA_tier1 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier1",colnames(dat)) &(!grepl("is.sequon.tier1",colnames(dat)))]
posIsAA_tier1
posIsAA_tier2 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier2",colnames(dat)) &(!grepl("is.sequon.tier2",colnames(dat)))]
posIsAA_tier2
alvacMatch_tier1 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier1",colnames(dat))]
alvacMatchNewName_tier1 <- plyr::laply(strsplit(alvacMatch_tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
c1086match_tier1 <- colnames(dat)[grepl("1mer.1086.match.tier1",colnames(dat))]
c1086matchNewName_tier1 <- plyr::laply(strsplit(c1086match_tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
cTV1match_tier1 <- colnames(dat)[grepl("1mer.TV1.match.tier1",colnames(dat))]
cTV1matchNewName_tier1 <- plyr::laply(strsplit(cTV1match_tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
posIsAA_tier1 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier1",colnames(dat)) &(!grepl("is.sequon.tier1",colnames(dat)))]
posIsAAnewName_tier1 <- plyr::laply(strsplit(posIsAA_tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2],list[4])})
alvacMatch_tier2 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier2",colnames(dat))]
alvacMatchNewName_tier2 <- plyr::laply(strsplit(alvacMatch_tier2, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
c1086match_tier2 <- colnames(dat)[grepl("1mer.1086.match.tier2",colnames(dat))]
c1086matchNewName_tier2 <- plyr::laply(strsplit(c1086match_tier2, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
cTV1match_tier2 <- colnames(dat)[grepl("1mer.TV1.match.tier2",colnames(dat))]
cTV1matchNewName_tier2 <- plyr::laply(strsplit(cTV1match_tier2, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
posIsAA_tier2 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier2",colnames(dat)) &(!grepl("is.sequon.tier2",colnames(dat)))]
posIsAAnewName_tier2 <- plyr::laply(strsplit(posIsAA_tier2, split = ".", fixed = TRUE) , function(list){paste0(list[2],list[4])})
sequon_tier1 <- colnames(dat)[grepl("is.sequon.tier1",colnames(dat))]
sequonNewName_tier1 <- plyr::laply(strsplit(sequon_tier1, split = ".", fixed = TRUE) , function(list){paste0(list[2])})
sequon_tier1
source("~/HVTN702/702sieve/code/preScreen/get_minvar.R")
get.minvar (n=271, n.vx=138, p=length(alvacMatch_tier1), fwer=0.05)
get.minvar (n=271, n.vx=138, p=(length(alvacMatch_tier1)+ length(posIsAA_tier1) + length(sequon_tier1)), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(alvacMatch_tier2), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(posIsAA_tier2), fwer=0.05)
length(alvacMatch_tier2)
length(posIsAA_tier2)
get.minvar (n=271, n.vx=138, p=(length(alvacMatch_tier2)+ length(posIsAA_tier2)), fwer=0.05)
get.minvar (n=271, n.vx=138, p=(length(alvacMatch_tier2)), fwer=0.05)
get.minvar (n=271, n.vx=138, p=length(posIsAA_tier2), fwer=0.05)
table(dat_c$armdesc)
133+138
tier1.binary.cutoff <- get.minvar (n=271, n.vx=138, p=(length(alvacMatch_tier1)+ length(posIsAA_tier1) + length(sequon_tier1)), fwer=0.05)
tier1.binary.cutoff
tier2.match.cutoff <- get.minvar (n=271, n.vx=138, p=(length(alvacMatch_tier2)), fwer=0.05)
tier2.residue.cutoff <- get.minvar (n=271, n.vx=138, p=length(posIsAA_tier2), fwer=0.05)
length_tier1 <- colnames(dat)[grepl("length.hypervariable",colnames(dat))]
length_tier1
numSequon_tier1 <- colnames(dat)[grepl("num.sequons",colnames(dat))]
numSequon_tier1
charge.tier1 <- colnames(dat)[grepl("charge",colnames(dat))]
charge.tier1
fisher(cbind(c(104-10, 10),130))
fisher(cbind(c(104-10, 10),c(130,0)))
fisher.test(cbind(c(104-10, 10),130))
fisher.test(cbind(c(104-10, 10),c(130,0)))
fisher.test(cbind(c(104, 0),c(130-10,10)))
fisher.test(cbind(c(104-2, 2),c(130-10,10)))
#Generate tables and figures for the manuscript
rm(list = ls(all.names = TRUE))
codeDir <- file.path(here::here(), "manuTablesFigures/M32")
outputDir <- file.path(here::here(), "manuTablesFigures/M32/output")
source(file.path(here::here(), "month32/code", "common.R"))
