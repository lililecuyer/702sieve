tier2TypeA
residue_scanning_tier2_fp$mark <- lpply(strsplit(residue_scanning_tier2_fp$mark, sep = "\\.")[[1]][2])
residue_scanning_tier2_fp$mark <- lply(strsplit(residue_scanning_tier2_fp$mark, sep = "\\.")[[1]][2])
residue_scanning_tier2_fp$mark <- laply(strsplit(residue_scanning_tier2_fp$mark, sep = "\\.")[[1]][2])
residue_scanning_tier2_fp$mark <- laply(strsplit(residue_scanning_tier2_fp$mark, split = "\\.")[[1]][2])
residue_scanning_tier2_fp$mark <- laply(strsplit(residue_scanning_tier2_fp$mark, split = ".")[[1]][2])
residue_scanning_tier2_fp <- table.VE.residue(binaryResultList, residueScreenedIn_tier2$x, WestfallYoungAdjPvalues_tier2Type1, forestplot = TRUE)
residue_scanning_tier2_fp$mark <- laply(residue_scanning_tier2_fp$mark, function (x)strsplit(x, split = ".")[[1]][2])
residue_scanning_tier2_fp <- table.VE.residue(binaryResultList, residueScreenedIn_tier2$x, WestfallYoungAdjPvalues_tier2Type1, forestplot = TRUE)
residue_scanning_tier2_fp$mark <- laply(residue_scanning_tier2_fp$mark, function (x)strsplit(x, split = "\\.")[[1]][2])
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeA)[,-1], "VE_residue_scanning_tier2_typeA", figureDir)
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeA)[,-1], "VE_residue_scanning_tier2_typeA.pdf", figureDir)
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeA)[,-1], "VE_residue_scanning_tier2_typeA.pdf", figureDir)
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeB)[,-1], "VE_residue_scanning_tier2_typeB.pdf", figureDir)
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeC)[,-1], "VE_residue_scanning_tier2_typeC.pdf", figureDir)
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeD)[,-1], "VE_residue_scanning_tier2_typeD.pdf", figureDir)
WestfallYoungAdjPvalues_tier1Type1to3 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung", paste0("WestfallYoungAdjPvalues_tier1Type1to3.csv")))
colnames(WestfallYoungAdjPvalues_tier2Type3) <- c("X", "p.unadj","p.FWER","p.FDR")
WestfallYoungAdjPvalues_tier1Type1to3 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung", paste0("WestfallYoungAdjPvalues_tier1Type1to3.csv")))
colnames(WestfallYoungAdjPvalues_tier2Type3) <- c("X", "p.unadj","p.FWER","p.FDR")
primaryVE_tier1 = table.VE.match.w.adjP(binaryResultList,marks = alvacMatchScreenedIn_tier1$x,WestfallYoungAdjPvalues_tier1Type1to3, forestplot = TRUE, Insert = "C.96ZM651")
alvacMatchScreenedIn_tier1$x
WestfallYoungAdjPvalues_tier1Type1to3 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung", paste0("WestfallYoungAdjPvalues_tier1Type1to3.csv")))
colnames(WestfallYoungAdjPvalues_tier1Type1to3) <- c("X", "p.unadj","p.FWER","p.FDR")
primaryVE_tier1 = table.VE.match.w.adjP(binaryResultList,marks = alvacMatchScreenedIn_tier1$x,WestfallYoungAdjPvalues_tier1Type1to3, forestplot = TRUE, Insert = "C.96ZM651")
c1086matchVE_tier1 = table.VE.match.wo.adjP (binaryResultList,marks = c1086matchScreenedIn_tier1$x, forestplot = TRUE, Insert = "C.1086")
cTV1matchVE_tier1 = table.VE.match.wo.adjP (binaryResultList,marks = cTV1matchScreenedIn_tier1$x, forestplot = TRUE, Insert = "C.TV1")
residue_scanning_tier1 <- table.VE.residue(binaryResultList, residueScreenedIn_tier1$x, WestfallYoungAdjPvalues_tier1Type1to3, forestplot = TRUE)
residue_scanning_tier1
source("~/HVTN702/702sieve/code/sieveBinary/sieveBinaryUtils.R")
sequon_tier1 <- table.VE.sequon(binaryResultList, sequonScreenedIn_tier1, WestfallYoungAdjPvalues_tier1Type1to3, forestplot = TRUE)
sequonScreenedIn_tier1$x
sequon_tier1 <- table.VE.sequon(binaryResultList, sequonScreenedIn_tier1$x, WestfallYoungAdjPvalues_tier1Type1to3, forestplot = TRUE)
sequon_tier1
aggpvaluesPlot (WestfallYoungAdjPvalues_tier1Type1to3, alvacMatchScreenedIn_tier1$x, adj = TRUE,
topText = "Tier 1: Sieve Effect Test P-values (Hazard-based VE)\nMatch/Mismatch C.96ZM651",
bottomText = "Env HXB2 Position", sizeText = 16, panelHeight = 2.2,
yLab = "Differential VE 2-Sided P-value",
figureDir = figureDir, figWidth = 8.5, figHeight = 8,
fileName = "aggPvaluePlots_tier1.pdf")
primaryVE_tier1[,-1]
forestplotBinary (primaryVE_tier1[,-1], "VE_match_mismatch_tier1.pdf", figureDir)
forestplotBinary (residue_scanning_tier1[,-1], "VE_residue_scanning_tier1.pdf", figureDir)
write.csv(c1086matchVE_tier1, file.path(tableDir, paste0("c1086matchVE_tier1", ".csv")),row.names = FALSE)
write.csv(cTV1matchVE_tier1, file.path(tableDir, paste0("cTV1matchVE_tier1", ".csv")),row.names = FALSE)
forestplotBinary (sequon_tier1[,-1], "VE_sequon_tier1.pdf", figureDir)
source("~/HVTN702/702sieve/code/sieveBinary/sieveBinaryUtils.R")
#Table and graphic summary for tier 2 type 1 and 3
WestfallYoungAdjPvalues_tier2Type3 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung", paste0("WestfallYoungAdjPvalues_tier2Type3.csv")))
colnames(WestfallYoungAdjPvalues_tier2Type3) <- c("X", "p.unadj","p.FWER","p.FDR")
WestfallYoungAdjPvalues_tier2Type1 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung", paste0("WestfallYoungAdjPvalues_tier2Type1.csv")))
colnames(WestfallYoungAdjPvalues_tier2Type1 ) <- c("X", "p.unadj","p.FWER","p.FDR")
primaryVE_tier2 = table.VE.match.w.adjP(binaryResultList,marks = alvacMatchScreenedIn_tier2$x,WestfallYoungAdjPvalues_tier2Type3, forestplot = FALSE, Insert = "C.96ZM651")
c1086matchVE_tier2 = table.VE.match.wo.adjP (binaryResultList,marks = c1086matchScreenedIn_tier2$x, forestplot = FALSE, Insert = "C.1086")
cTV1matchVE_tier2 = table.VE.match.wo.adjP (binaryResultList,marks = cTV1matchScreenedIn_tier2$x, forestplot = FALSE, Insert = "C.TV1")
residue_scanning_tier2 <- table.VE.residue(binaryResultList, residueScreenedIn_tier2$x, WestfallYoungAdjPvalues_tier2Type1, forestplot = FALSE)
aggpvaluesPlot (WestfallYoungAdjPvalues_tier2Type3, alvacMatchScreenedIn_tier2$x, adj = TRUE,
topText = "Tier 2: Sieve Effect Test P-values (Hazard-based VE)\nMatch/Mismatch C.96ZM651",
bottomText = "Env HXB2 Position", sizeText = 16, panelHeight = 2.2,
yLab = "Differential VE 2-Sided P-value",
figureDir = figureDir, figWidth = 8.5, figHeight = 8,
fileName = "aggPvaluePlots_matchVsMismatchPrimaryInsert_tier2.pdf")
aggpvaluesPlot (WestfallYoungAdjPvalues_tier2Type1, residueScreenedIn_tier2$x, adj = TRUE,
topText = "Tier 2: Sieve Effect Test P-values (Hazard-based VE)\nResidue Present/Absent",
bottomText = "Env HXB2 Position", sizeText = 16, panelHeight = 2.2,
yLab = "Differential VE 2-Sided P-value",
figureDir = figureDir, figWidth = 8.5, figHeight = 8,
fileName = "aggPvaluePlots_residueScanning_tier2.pdf")
write.csv(primaryVE_tier2, file.path(tableDir, paste0("primaryVE_tier2", ".csv")),row.names = FALSE)
write.csv(c1086matchVE_tier2, file.path(tableDir, paste0("c1086matchVE_tier2", ".csv")),row.names = FALSE)
write.csv(cTV1matchVE_tier2, file.path(tableDir, paste0("cTV1matchVE_tier2", ".csv")),row.names = FALSE)
write.csv(residue_scanning_tier2, file.path(tableDir, paste0("residue_scanning_tier2", ".csv")),row.names = FALSE)
#Forest plot
residue_scanning_tier2_fp <- table.VE.residue(binaryResultList, residueScreenedIn_tier2$x, WestfallYoungAdjPvalues_tier2Type1, forestplot = TRUE)
residue_scanning_tier2_fp$mark <- laply(residue_scanning_tier2_fp$mark, function (x)strsplit(x, split = "\\.")[[1]][2])
#Item-specific summary
aaPos <- unique(laply(colnames(dat)[(grepl("\\.is.",colnames(dat))) &(! (grepl("sequon",colnames(dat))))],function(list)strsplit(list,split="\\.")[[1]][[2]]))
loc <- function(string,pattern){
seq = seq(1:length(string))
output = NULL
for(i in 1:length(pattern)){
output[i] = seq[string == pattern[i]]
}
return(output)
}
tier2TypeA <- aaPos[loc(aaPos,"160"):loc(aaPos,"180")]
tier2TypeB <- sort(c(aaPos[loc(aaPos,"364"):loc(aaPos,"374")], aaPos[loc(aaPos,"421"):loc(aaPos,"435")],
aaPos[loc(aaPos,"455"):loc(aaPos,"459")], aaPos[loc(aaPos,"466"):loc(aaPos,"477")],
aaPos[loc(aaPos,"197"):loc(aaPos,"207")], aaPos[loc(aaPos,"425"):loc(aaPos,"437")],
aaPos[loc(aaPos,"274"):loc(aaPos,"283")]))
tier2TypeC <- aaPos[loc(aaPos,"295"):loc(aaPos,"322")]
tier2TypeD <- c("459", aaPos[loc(aaPos,"466"):loc(aaPos,"470")])
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeA)[,-1], "VE_residue_scanning_tier2_typeA.pdf", figureDir)
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeB)[,-1], "VE_residue_scanning_tier2_typeB.pdf", figureDir)
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeC)[,-1], "VE_residue_scanning_tier2_typeC.pdf", figureDir)
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeD)[,-1], "VE_residue_scanning_tier2_typeD.pdf", figureDir)
# Tier 1
WestfallYoungAdjPvalues_tier1Type1to3 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung", paste0("WestfallYoungAdjPvalues_tier1Type1to3.csv")))
colnames(WestfallYoungAdjPvalues_tier1Type1to3) <- c("X", "p.unadj","p.FWER","p.FDR")
primaryVE_tier1 = table.VE.match.w.adjP(binaryResultList,marks = alvacMatchScreenedIn_tier1$x,WestfallYoungAdjPvalues_tier1Type1to3, forestplot = TRUE, Insert = "C.96ZM651")
c1086matchVE_tier1 = table.VE.match.wo.adjP (binaryResultList,marks = c1086matchScreenedIn_tier1$x, forestplot = TRUE, Insert = "C.1086")
cTV1matchVE_tier1 = table.VE.match.wo.adjP (binaryResultList,marks = cTV1matchScreenedIn_tier1$x, forestplot = TRUE, Insert = "C.TV1")
residue_scanning_tier1 <- table.VE.residue(binaryResultList, residueScreenedIn_tier1$x, WestfallYoungAdjPvalues_tier1Type1to3, forestplot = TRUE)
sequon_tier1 <- table.VE.sequon(binaryResultList, sequonScreenedIn_tier1$x, WestfallYoungAdjPvalues_tier1Type1to3, forestplot = TRUE)
aggpvaluesPlot (WestfallYoungAdjPvalues_tier1Type1to3, alvacMatchScreenedIn_tier1$x, adj = TRUE,
topText = "Tier 1: Sieve Effect Test P-values (Hazard-based VE)\nMatch/Mismatch C.96ZM651",
bottomText = "Env HXB2 Position", sizeText = 16, panelHeight = 2.2,
yLab = "Differential VE 2-Sided P-value",
figureDir = figureDir, figWidth = 8.5, figHeight = 8,
fileName = "aggPvaluePlots_tier1.pdf")
forestplotBinary (primaryVE_tier1[,-1], "VE_match_mismatch_tier1.pdf", figureDir)
forestplotBinary (residue_scanning_tier1[,-1], "VE_residue_scanning_tier1.pdf", figureDir)
forestplotBinary (sequon_tier1[,-1], "VE_sequon_tier1.pdf", figureDir)
write.csv(c1086matchVE_tier1, file.path(tableDir, paste0("c1086matchVE_tier1", ".csv")),row.names = FALSE)
write.csv(cTV1matchVE_tier1, file.path(tableDir, paste0("cTV1matchVE_tier1", ".csv")),row.names = FALSE)
source("~/HVTN702/702sieve/code/sieveBinary/sieveBinaryUtils.R")
#Table and graphic summary for tier 2 type 1 and 3
WestfallYoungAdjPvalues_tier2Type3 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung", paste0("WestfallYoungAdjPvalues_tier2Type3.csv")))
colnames(WestfallYoungAdjPvalues_tier2Type3) <- c("X", "p.unadj","p.FWER","p.FDR")
WestfallYoungAdjPvalues_tier2Type1 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung", paste0("WestfallYoungAdjPvalues_tier2Type1.csv")))
colnames(WestfallYoungAdjPvalues_tier2Type1 ) <- c("X", "p.unadj","p.FWER","p.FDR")
primaryVE_tier2 = table.VE.match.w.adjP(binaryResultList,marks = alvacMatchScreenedIn_tier2$x,WestfallYoungAdjPvalues_tier2Type3, forestplot = FALSE, Insert = "C.96ZM651")
c1086matchVE_tier2 = table.VE.match.wo.adjP (binaryResultList,marks = c1086matchScreenedIn_tier2$x, forestplot = FALSE, Insert = "C.1086")
cTV1matchVE_tier2 = table.VE.match.wo.adjP (binaryResultList,marks = cTV1matchScreenedIn_tier2$x, forestplot = FALSE, Insert = "C.TV1")
residue_scanning_tier2 <- table.VE.residue(binaryResultList, residueScreenedIn_tier2$x, WestfallYoungAdjPvalues_tier2Type1, forestplot = FALSE)
aggpvaluesPlot (WestfallYoungAdjPvalues_tier2Type3, alvacMatchScreenedIn_tier2$x, adj = TRUE,
topText = "Tier 2: Sieve Effect Test P-values (Hazard-based VE)\nMatch/Mismatch C.96ZM651",
bottomText = "Env HXB2 Position", sizeText = 16, panelHeight = 2.2,
yLab = "Differential VE 2-Sided P-value",
figureDir = figureDir, figWidth = 8.5, figHeight = 8,
fileName = "aggPvaluePlots_matchVsMismatchPrimaryInsert_tier2.pdf")
aggpvaluesPlot (WestfallYoungAdjPvalues_tier2Type1, residueScreenedIn_tier2$x, adj = TRUE,
topText = "Tier 2: Sieve Effect Test P-values (Hazard-based VE)\nResidue Present/Absent",
bottomText = "Env HXB2 Position", sizeText = 16, panelHeight = 2.2,
yLab = "Differential VE 2-Sided P-value",
figureDir = figureDir, figWidth = 8.5, figHeight = 8,
fileName = "aggPvaluePlots_residueScanning_tier2.pdf")
write.csv(primaryVE_tier2, file.path(tableDir, paste0("primaryVE_tier2", ".csv")),row.names = FALSE)
write.csv(c1086matchVE_tier2, file.path(tableDir, paste0("c1086matchVE_tier2", ".csv")),row.names = FALSE)
write.csv(cTV1matchVE_tier2, file.path(tableDir, paste0("cTV1matchVE_tier2", ".csv")),row.names = FALSE)
write.csv(residue_scanning_tier2, file.path(tableDir, paste0("residue_scanning_tier2", ".csv")),row.names = FALSE)
#Forest plot
residue_scanning_tier2_fp <- table.VE.residue(binaryResultList, residueScreenedIn_tier2$x, WestfallYoungAdjPvalues_tier2Type1, forestplot = TRUE)
residue_scanning_tier2_fp$mark <- laply(residue_scanning_tier2_fp$mark, function (x)strsplit(x, split = "\\.")[[1]][2])
#Item-specific summary
aaPos <- unique(laply(colnames(dat)[(grepl("\\.is.",colnames(dat))) &(! (grepl("sequon",colnames(dat))))],function(list)strsplit(list,split="\\.")[[1]][[2]]))
loc <- function(string,pattern){
seq = seq(1:length(string))
output = NULL
for(i in 1:length(pattern)){
output[i] = seq[string == pattern[i]]
}
return(output)
}
tier2TypeA <- aaPos[loc(aaPos,"160"):loc(aaPos,"180")]
tier2TypeB <- sort(c(aaPos[loc(aaPos,"364"):loc(aaPos,"374")], aaPos[loc(aaPos,"421"):loc(aaPos,"435")],
aaPos[loc(aaPos,"455"):loc(aaPos,"459")], aaPos[loc(aaPos,"466"):loc(aaPos,"477")],
aaPos[loc(aaPos,"197"):loc(aaPos,"207")], aaPos[loc(aaPos,"425"):loc(aaPos,"437")],
aaPos[loc(aaPos,"274"):loc(aaPos,"283")]))
tier2TypeC <- aaPos[loc(aaPos,"295"):loc(aaPos,"322")]
tier2TypeD <- c("459", aaPos[loc(aaPos,"466"):loc(aaPos,"470")])
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeA)[,-1], "VE_residue_scanning_tier2_typeA.pdf", figureDir)
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeB)[,-1], "VE_residue_scanning_tier2_typeB.pdf", figureDir)
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeC)[,-1], "VE_residue_scanning_tier2_typeC.pdf", figureDir)
forestplotBinary (filter(residue_scanning_tier2_fp, mark %in% tier2TypeD)[,-1], "VE_residue_scanning_tier2_typeD.pdf", figureDir)
# Tier 1
WestfallYoungAdjPvalues_tier1Type1to3 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung", paste0("WestfallYoungAdjPvalues_tier1Type1to3.csv")))
colnames(WestfallYoungAdjPvalues_tier1Type1to3) <- c("X", "p.unadj","p.FWER","p.FDR")
primaryVE_tier1 = table.VE.match.w.adjP(binaryResultList,marks = alvacMatchScreenedIn_tier1$x,WestfallYoungAdjPvalues_tier1Type1to3, forestplot = TRUE, Insert = "C.96ZM651")
c1086matchVE_tier1 = table.VE.match.wo.adjP (binaryResultList,marks = c1086matchScreenedIn_tier1$x, forestplot = TRUE, Insert = "C.1086")
cTV1matchVE_tier1 = table.VE.match.wo.adjP (binaryResultList,marks = cTV1matchScreenedIn_tier1$x, forestplot = TRUE, Insert = "C.TV1")
residue_scanning_tier1 <- table.VE.residue(binaryResultList, residueScreenedIn_tier1$x, WestfallYoungAdjPvalues_tier1Type1to3, forestplot = TRUE)
sequon_tier1 <- table.VE.sequon(binaryResultList, sequonScreenedIn_tier1$x, WestfallYoungAdjPvalues_tier1Type1to3, forestplot = TRUE)
aggpvaluesPlot (WestfallYoungAdjPvalues_tier1Type1to3, alvacMatchScreenedIn_tier1$x, adj = TRUE,
topText = "Tier 1: Sieve Effect Test P-values (Hazard-based VE)\nMatch/Mismatch C.96ZM651",
bottomText = "Env HXB2 Position", sizeText = 16, panelHeight = 2.2,
yLab = "Differential VE 2-Sided P-value",
figureDir = figureDir, figWidth = 8.5, figHeight = 8,
fileName = "aggPvaluePlots_tier1.pdf")
forestplotBinary (primaryVE_tier1[,-1], "VE_match_mismatch_tier1.pdf", figureDir)
forestplotBinary (residue_scanning_tier1[,-1], "VE_residue_scanning_tier1.pdf", figureDir)
forestplotBinary (sequon_tier1[,-1], "VE_sequon_tier1.pdf", figureDir)
write.csv(c1086matchVE_tier1, file.path(tableDir, paste0("c1086matchVE_tier1", ".csv")),row.names = FALSE)
write.csv(cTV1matchVE_tier1, file.path(tableDir, paste0("cTV1matchVE_tier1", ".csv")),row.names = FALSE)
source("~/HVTN702/702sieve/code/sieveBinary/sieveBinaryUtils.R")
forestplotBinary (sequon_tier1[,-1], "VE_sequon_tier1.pdf", figureDir,width = 12, height1 = 0.25, height2 = 0)
forestplotBinary (sequon_tier1[,-1], "VE_sequon_tier1.pdf", figureDir,width = 12, height1 = 0.21, height2 = 0)
forestplotBinary (sequon_tier1[,-1], "VE_sequon_tier1.pdf", figureDir,width = 12, height1 = 0.22, height2 = 0)
forestplotBinary (sequon_tier1[,-1], "VE_sequon_tier1.pdf", figureDir,width = 12, height1 = 0.23, height2 = 0)
forestplotBinary (sequon_tier1[,-1], "VE_sequon_tier1.pdf", figureDir,width = 10, height1 = 0.23, height2 = 0)
forestplotBinary (primaryVE_tier1[,-1], "VE_match_mismatch_tier1.pdf", figureDir, figureDir,width = 11)
source("~/HVTN702/702sieve/code/sieveBinary/sieveBinaryUtils.R")
forestplotBinary (primaryVE_tier1[,-1], "VE_match_mismatch_tier1.pdf", figureDir, figureDir,width = 11)
forestplotBinary (primaryVE_tier1[,-1], "VE_match_mismatch_tier1.pdf", figureDir, width = 11)
binaryResultList$lineageLabel
fit <- binaryResultList$lineageLabel
VE <- tibble(feature = character(), cases = character(), VE = character(),mean = numeric(), ll = numeric(), ul = numeric(),
P = character(), diffP = character())
VE <- add_row(VE, feature = "", cases = "", VE = "" , mean = NA, ll = NA, ul = NA, P = "",
diffP = format.p(fit$diffP))
VE
fit
fit <- binaryResultList$lineageLabel
VEtable <- fit$VEtable
VE <- add_row(VE, feature  = "Multiple Founders", cases = VEtable$inc[1],
VE = paste0(format.VE(VEtable$VE[1]), " (", format.VE(VEtable$LB[1]),", ",format.VE(VEtable$UB[1]),")") ,
mean = VEtable$VE[1]*100, ll = VEtable$LB[1]*100, ul = VEtable$UB[1]*100,
P = format.p(VEtable$p[1]), diffP = "")
VE
fit <- binaryResultList$lineageLabel
VEtable <- fit$VEtable
VE <- tibble(feature = character(), cases = character(), VE = character(),mean = numeric(), ll = numeric(), ul = numeric(),
P = character(), diffP = character())
VE <- add_row(VE, feature = "", cases = "", VE = "" , mean = NA, ll = NA, ul = NA, P = "",
diffP = format.p(fit$diffP))
VE <- add_row(VE, feature  = "Multiple Founders", cases = VEtable$inc[1],
VE = paste0(format.VE(VEtable$VE[1]), " (", format.VE(VEtable$LB[1]),", ",format.VE(VEtable$UB[1]),")") ,
mean = VEtable$VE[1]*100, ll = VEtable$LB[1]*100, ul = VEtable$UB[1]*100,
P = format.p(VEtable$p[1]), diffP = "")
VE <- add_row(VE, feature = "Single Founder", cases = VEtable$inc[2],
VE = paste0(format.VE(VEtable$VE[2]), " (", format.VE(VEtable$LB[2]),", ",format.VE(VEtable$UB[2]),")") ,
mean = VEtable$VE[2]*100, ll = VEtable$LB[2]*100, ul = VEtable$UB[2]*100,
P = format.p(VEtable$p[2]), diffP = "")
VE
header.plot <- c("Seq\nFeature", "No. of Cases (V vs. P)\n(Incidence per 100 PYRs)", "VE(%)(95% CI)", "Two-sided\nP-value", "P-value", "FWER\nP-value","Q-value")
p <- forestWrap ( VE, c(4,5,6), header.plot, xlim = c(-30, 100),
x_ticks_at = c(-20, 0, 20, 40, 60, 80), xlab = "VE (%) (95% CI)",
ci_cols = rep(c("black","royalblue", "darkred"),dim(VE)[1]/3),
nrows_underline = NULL,
insertHeaderText = "Differential VE\nUnadjusted P-value")
VE
header.plot <- c("Seq\nFeature", "No. of Cases (V vs. P)\n(Incidence per 100 PYRs)", "VE(%)(95% CI)", "Two-sided\nP-value", "Differential VE\nUnadjusted P-value")
p <- forestWrap ( VE, c(4,5,6), header.plot, xlim = c(-30, 100),
x_ticks_at = c(-20, 0, 20, 40, 60, 80), xlab = "VE (%) (95% CI)",
ci_cols = rep(c("black","royalblue", "darkred"),dim(VE)[1]/3),
nrows_underline = NULL,
insertHeaderText = NULL)
p
ggplot2::ggsave(filename = "VE_singleVsMultipleFounder.pdf",
plot = p,
path = figureDir,
dpi = 320,
width = 10, height = 2,units = "in")
ggplot2::ggsave(filename = "VE_singleVsMultipleFounder.pdf",
plot = p,
path = figureDir,
dpi = 320,
width = 8, height = 2,units = "in")
ggplot2::ggsave(filename = "VE_singleVsMultipleFounder.pdf",
plot = p,
path = figureDir,
dpi = 320,
width = 9, height = 2,units = "in")
# Purpose: Estimation of hazard ratio-based VE by each Tier 2 Hamming distance (in SAP Table 5);
#          Considers primary endpoints, and the PP cohort is the analysis cohort
#          Hypothesis testing; plotting
#          Time of the first RNA positive sample used as the failure time variable
# Method:  Juraska andn Gilbert (Biometrics, 2013)
#          R package sievePH, version 1.0.3 on Github
# Input:   702 primary endpoints and Hamming distances
# Output:  PDF files, each containing a single plot
# Author:  Li Li
# Date:    Jan 1, 2024
rm(list=ls(all=TRUE))
here::i_am("702sieve/rootDir.R")
repoDir <- here::here()
dataDir <- file.path(repoDir, "data")
codeDir <- file.path(repoDir, "702sieve/code/sievePH")
outputDir <- file.path(repoDir, "702sieve/code/sievePH/output")
figureDir <- file.path(repoDir, "702sieve/figures/sievePH")
tableDir <- file.path(repoDir, "702sieve/tables/sievePH")
library(tidyverse)
library(sievePH)
source(file.path(codeDir, "ggplot.summary.sievePH.R"))
source(file.path(repoDir, "702sieve/code/common.R"))
dat <- dat %>%
mutate(tx=as.numeric(TRT01P=="T1"),
eventTime = HIV24fu,
eventInd = HIV24)
table(dat$cohort)
dat <- dat %>%
mutate(tx=as.numeric(TRT01P=="T1"),
eventTime = HIV24fu,
eventInd = HIV24) %>%
select(armdesc, eventTime, eventInd, starts_with("hdist"))
dat <- dat %>%
mutate(tx=as.numeric(TRT01P=="T1"),
eventTime = HIV24fu,
eventInd = HIV24) %>%
select(tx, eventTime, eventInd, starts_with("hdist"))
View(dat)
dist <- grep("hdist", colnames(dat), value=TRUE)
dist
xLab <- case_when(dist =="hdist.zspace.1086.gp120.tier2" ~ "PC-weighted Hamming Distance to C.1086",
dist =="hdist.zspace.TV1.gp120.tier2" ~ "PC-weighted Hamming Distance to C.TV1",
dist=="hdist.zspace.96ZM651.V2.linear.epitope.tier2" ~ "V2 Linear Epitope PC-weighted Hamming Distance to C.96ZM651",
dist=="hdist.zspace.96ZM651.CD4.binding.site.tier2" ~ "CD4 Contact Epitopes PC-weighted Hamming Distance to C.96ZM651",
dist=="hdist.zspace.96ZM651.V5.tier2" ~ "V5 PC-weighted Hamming Distance to C.96ZM651",
dist=="hdist.zspace.96ZM651.V3.tier2" ~ "V3 PC-weighted Hamming Distance to C.96ZM651",
dist=="hdist.zspace.96ZM651.tier2" ~ "PC-weighted Hamming Distance to C.96ZM651")
# strings included in file names
markFileString <- gsub(".", "_", dist, fixed=TRUE)
markFileString
pHRconstancy <- pHRunity <- NULL
format.p <- function(p, ndigits=2){
pp <- NULL
for(i in 1:length(p)){
if(is.na(p[i])){
pp[i] <- "--"
}else{
if(p[i]<0.001){pp[i] <- " < 0.001"}
else if (p[i]==1){pp[i] <- "= 1"}
else{pp[i] <-paste0(" = ",as.character(format(as.numeric(p[i]),digits=ndigits,nsmall=ndigits)))
if(pp[i]== " = 1.00") {pp[i]= " = 1"}}
}
}
return (pp)
}
adjPvalueDir
WestfallYoungAdjPvalues_tier2Type2 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung", paste0("WestfallYoungAdjPvalues_tier2Type2.csv")))
WestfallYoungAdjPvalues_tier2Type2and4 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung", paste0("WestfallYoungAdjPvalues_tier2Type2and4.csv")))
WestfallYoungAdjPvalues_tier2Type2and4and5 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung", paste0("WestfallYoungAdjPvalues_tier2Type2and4and5.csv")))
colnames(WestfallYoungAdjPvalues_tier2Type1 ) <- c("X", "p.unadj","p.FWER","p.FDR")
WestfallYoungAdjPvalues_tier2Type2and4and5 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung", paste0("WestfallYoungAdjPvalues_tier2Type2and4and5.csv")))
colnames(WestfallYoungAdjPvalues_tier2Type2and4and5) <- c("X", "p.unadj","p.FWER","p.FDR")
WestfallYoungAdjPvalues_tier2Type2and4and5
WestfallYoungAdjPvalues_tier2Type2and4and5 <- read.csv(file=file.path(repoDir,"702sieve/tables/westfallYoung",
paste0("WestfallYoungAdjPvalues_tier2Type2and4and5.csv")), show_col_types=FALSE)
WestfallYoungAdjPvalues_tier2Type2and4and5 <- read_csv(file=file.path(repoDir,"702sieve/tables/westfallYoung",
paste0("WestfallYoungAdjPvalues_tier2Type2and4and5.csv")), show_col_types=FALSE)
WestfallYoungAdjPvalues_tier2Type2and4and5
p.df <- read_csv(file=file.path(repoDir,"702sieve/tables/westfallYoung",
paste0("WestfallYoungAdjPvalues_tier2Type2and4and5.csv")), show_col_types=FALSE)
p <- filter(p.df, mark%in%dist)
p.df <- filter(p.df, mark%in%dist)
p.df
# for each Hamming distance
for (i in 1:length(dist)){
dat1 <- select(dat, tx, eventTime, eventInd, mark=dist[i])
# convert mark values for non-primary endpoints to NA
dat1$mark <- ifelse(dat1$eventInd==0, NA, dat1$mark)
# complete-case analysis, i.e., discard cases with a missing mark
dat1 <- filter(dat1, !(eventInd==1 & is.na(mark)))
# fit the mark-specific HR model
markRng <- range(dat1$mark, na.rm=TRUE)
markGrid <- seq(markRng[1], markRng[2], length.out=200)
fit <- with(dat1, sievePH(eventTime=eventTime, eventInd=eventInd, mark=mark, tx=tx))
sfit <- summary(fit, markGrid=markGrid, sieveAlternative="oneSided")
# 2-sided Wald test of {H0: VE(v)=0 for all v}
pHRunity <- c(pHRunity, sfit$pWald.HRunity.2sided)
# Double 1-sided Wald test of {H0: VE(v)=VE for all v} against {H1: VE(v) varies with v}
pHRconstancy <- c(pHRconstancy, min(2*sfit$pWald.HRconstant.1sided,1))
pdf(file.path(figDir, paste0("702_sievePH_VE_", markFileString[i], "_PP",fileTag,".pdf")), width=0.9*7, height=0.9*6.3)
xLim <- range(dat1$mark, na.rm=TRUE)
plotHeights <- c(0.32, 0.68)
ggsave.width <- 0.7 * 7.3
ggsave.height <- 0.7 * 6.5
title <- NULL
p <- as.numeric(p.df[p.df$mark==dist[i], c("p.unadj", "p.FWER", "p.FDR")])
if(is.na(p[1])){
unajustedP = min(2*sfit$pWald.HRconstant.1sided,1)
fmt.p <- format.p(unajustedP)
subtitle <- paste0("Double One-Sided Unadjusted Sieve P ", fmt.p)
}else{
fmt.p <-  sapply(p, function(x){ format.p(x)})
subtitle <- paste0("Double One-Sided Unadjusted Sieve P ", fmt.p[1], "\nFWER P ", fmt.p[2], ", FDR P ", fmt.p[3])
}
ylimL <- -0.4
p <- ggplot(sfit,
mark=dat1$mark,
tx=dat1$tx,
xlim=xLim,
ylim=c(ylimL, 1),
xtickAt=NULL,
xtickLab=NULL,
ytickAt=seq(-1, 1, by=0.2),
ytickLab=seq(-100, 100, by=20),
xlab=xLab[i],
ylab="Vaccine Efficacy (%)",
axisLabSize=15.5,
legendLabSize=12,
txLab=c("Placebo", "Vaccine"),
jitterFactor=0.1,
title=title,
subtitle=subtitle,
subtitleSize=13,
estLineSize=1.8,
ciLineSize=1.4,
pointSize=2.1,
plotHeights=plotHeights)
print(p)
# mtext(paste0(doseTitleString[dose], " by ", markTitleString[mark], ": ", trialTitleString[trial]), side=3, font=2, line=0.5, cex=1.4)
dev.off()
}
# Purpose: Estimation of hazard ratio-based VE by each Tier 2 Hamming distance (in SAP Table 5);
#          Considers primary endpoints, and the PP cohort is the analysis cohort
#          Hypothesis testing; plotting
#          Time of the first RNA positive sample used as the failure time variable
# Method:  Juraska andn Gilbert (Biometrics, 2013)
#          R package sievePH, version 1.0.3 on Github
# Input:   702 primary endpoints and Hamming distances
# Output:  PDF files, each containing a single plot
# Author:  Li Li
# Date:    Jan 1, 2024
rm(list=ls(all=TRUE))
here::i_am("702sieve/rootDir.R")
repoDir <- here::here()
dataDir <- file.path(repoDir, "data")
codeDir <- file.path(repoDir, "702sieve/code/sievePH")
outputDir <- file.path(repoDir, "702sieve/code/sievePH/output")
figureDir <- file.path(repoDir, "702sieve/figures/sievePH")
tableDir <- file.path(repoDir, "702sieve/tables/sievePH")
library(tidyverse)
library(sievePH)
source(file.path(codeDir, "ggplot.summary.sievePH.R"))
source(file.path(repoDir, "702sieve/code/common.R"))
dat <- dat %>%
mutate(tx=as.numeric(TRT01P=="T1"),
eventTime = HIV24fu,
eventInd = HIV24) %>%
select(tx, eventTime, eventInd, starts_with("hdist"))
# Hamming distance variable names
dist <- grep("hdist", colnames(dat), value=TRUE)
# axis labels
xLab <- case_when(dist =="hdist.zspace.1086.gp120.tier2" ~ "PC-weighted Hamming Distance to C.1086",
dist =="hdist.zspace.TV1.gp120.tier2" ~ "PC-weighted Hamming Distance to C.TV1",
dist=="hdist.zspace.96ZM651.V2.linear.epitope.tier2" ~ "V2 Linear Epitope PC-weighted Hamming Distance to C.96ZM651",
dist=="hdist.zspace.96ZM651.CD4.binding.site.tier2" ~ "CD4 Contact Epitopes PC-weighted Hamming Distance to C.96ZM651",
dist=="hdist.zspace.96ZM651.V5.tier2" ~ "V5 PC-weighted Hamming Distance to C.96ZM651",
dist=="hdist.zspace.96ZM651.V3.tier2" ~ "V3 PC-weighted Hamming Distance to C.96ZM651",
dist=="hdist.zspace.96ZM651.tier2" ~ "PC-weighted Hamming Distance to C.96ZM651")
# strings included in file names
markFileString <- gsub(".", "_", dist, fixed=TRUE)
# initialize vectors of p-values
pHRconstancy <- pHRunity <- NULL
format.p <- function(p, ndigits=2){
pp <- NULL
for(i in 1:length(p)){
if(is.na(p[i])){
pp[i] <- "--"
}else{
if(p[i]<0.001){pp[i] <- " < 0.001"}
else if (p[i]==1){pp[i] <- "= 1"}
else{pp[i] <-paste0(" = ",as.character(format(as.numeric(p[i]),digits=ndigits,nsmall=ndigits)))
if(pp[i]== " = 1.00") {pp[i]= " = 1"}}
}
}
return (pp)
}
p.df <- read_csv(file=file.path(repoDir,"702sieve/tables/westfallYoung",
paste0("WestfallYoungAdjPvalues_tier2Type2and4and5.csv")), show_col_types=FALSE)
p.df <- filter(p.df, mark%in%dist)
# for each Hamming distance
for (i in 1:length(dist)){
dat1 <- select(dat, tx, eventTime, eventInd, mark=dist[i])
# convert mark values for non-primary endpoints to NA
dat1$mark <- ifelse(dat1$eventInd==0, NA, dat1$mark)
# complete-case analysis, i.e., discard cases with a missing mark
dat1 <- filter(dat1, !(eventInd==1 & is.na(mark)))
# fit the mark-specific HR model
markRng <- range(dat1$mark, na.rm=TRUE)
markGrid <- seq(markRng[1], markRng[2], length.out=200)
fit <- with(dat1, sievePH(eventTime=eventTime, eventInd=eventInd, mark=mark, tx=tx))
sfit <- summary(fit, markGrid=markGrid, sieveAlternative="oneSided")
# 2-sided Wald test of {H0: VE(v)=0 for all v}
pHRunity <- c(pHRunity, sfit$pWald.HRunity.2sided)
# Double 1-sided Wald test of {H0: VE(v)=VE for all v} against {H1: VE(v) varies with v}
pHRconstancy <- c(pHRconstancy, min(2*sfit$pWald.HRconstant.1sided,1))
pdf(file.path(figureDir, paste0("702_sievePH_VE_", markFileString[i], "_PP",fileTag,".pdf")), width=0.9*7, height=0.9*6.3)
xLim <- range(dat1$mark, na.rm=TRUE)
plotHeights <- c(0.32, 0.68)
ggsave.width <- 0.7 * 7.3
ggsave.height <- 0.7 * 6.5
title <- NULL
p <- as.numeric(p.df[p.df$mark==dist[i], c("p.unadj", "p.FWER", "p.FDR")])
if(is.na(p[1])){
unajustedP = min(2*sfit$pWald.HRconstant.1sided,1)
fmt.p <- format.p(unajustedP)
subtitle <- paste0("Double One-Sided Unadjusted Sieve P ", fmt.p)
}else{
fmt.p <-  sapply(p, function(x){ format.p(x)})
subtitle <- paste0("Double One-Sided Unadjusted Sieve P ", fmt.p[1], "\nFWER P ", fmt.p[2], ", FDR P ", fmt.p[3])
}
ylimL <- -0.4
p <- ggplot(sfit,
mark=dat1$mark,
tx=dat1$tx,
xlim=xLim,
ylim=c(ylimL, 1),
xtickAt=NULL,
xtickLab=NULL,
ytickAt=seq(-1, 1, by=0.2),
ytickLab=seq(-100, 100, by=20),
xlab=xLab[i],
ylab="Vaccine Efficacy (%)",
axisLabSize=15.5,
legendLabSize=12,
txLab=c("Placebo", "Vaccine"),
jitterFactor=0.1,
title=title,
subtitle=subtitle,
subtitleSize=13,
estLineSize=1.8,
ciLineSize=1.4,
pointSize=2.1,
plotHeights=plotHeights)
print(p)
# mtext(paste0(doseTitleString[dose], " by ", markTitleString[mark], ": ", trialTitleString[trial]), side=3, font=2, line=0.5, cex=1.4)
dev.off()
}
source("~/HVTN702/702sieve/code/sievePH/VEbyHammingDist.R")
source("~/HVTN702/702sieve/code/sievePH/VEbyHammingDist.R")
