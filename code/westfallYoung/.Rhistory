# Purpose: Westfall and Young permutation-based multiplicity adjustment for sieve test p-values
#          The SAP states that p-values are calculated for the vaccine vs. placebo comparison.
# Method:  Westfall and Young (1993)
#          Juraska and Gilbert (Biometrics, 2013)
#          R package sievePH, version 1.0.1 on CRAN
#          Lunn and McNeil (1995)
# Input:   702 primary endpoints,  sequence features specified in the sieve SAP that are to be adjusted in multiple comparison
# Output:  A list with each component being a vector of sieve test p-values for the analyzed marks from a single permutation of the mark variable.
# Author:  Li Li
rm(list=ls(all=TRUE))
#p.adj.perm2 needs update
# Setting directory paths -------------------------------------------------
library(here)
rm(list=ls(all=TRUE))
here::i_am("702sieve/rootDir.R")
repoDir <- here::here()
dataDir <- file.path(repoDir, "data")
codeDir <- file.path(repoDir, "702sieve/code/westfallYoung")
outputDir <- file.path(repoDir, "702sieve/code/westfallYoung/output")
figureDir <- file.path(repoDir, "702sieve/figures/westfallYoung")
tableDir <- file.path(repoDir, "702sieve/tables/westfallYoung")
source(file.path(codeDir,"lunnMcneil.R"))
source(file.path(codeDir,"p.adj.perm2.R"))
library(sievePH)
library(tidyverse)
library(plyr)
####################################################################################
#this section of code is the same with sieveBinaryMain.R
source(file.path(repoDir, "702sieve/code/common.R"))
dat <- read.csv(file.path(dataDir, datFile)) %>%
mutate(tx=as.numeric(TRT01P=="T1"),
lineageLabel = as.numeric(transmitted.founder.status.tier2=="Multi"),
eventTime = HIV24fu,
eventInd = HIV24)
alvacMatch_tier1 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier1",colnames(dat))]
c1086match_tier1 <- colnames(dat)[grepl("1mer.1086.match.tier1",colnames(dat))]
cTV1match_tier1 <- colnames(dat)[grepl("1mer.TV1.match.tier1",colnames(dat))]
posIsAA_tier1 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier1",colnames(dat)) &(!grepl("is.sequon.tier1",colnames(dat)))]
alvacMatch_tier2 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier2",colnames(dat))]
c1086match_tier2 <- colnames(dat)[grepl("1mer.1086.match.tier2",colnames(dat))]
cTV1match_tier2 <- colnames(dat)[grepl("1mer.TV1.match.tier2",colnames(dat))]
posIsAA_tier2 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier2",colnames(dat)) &(!grepl("is.sequon.tier2",colnames(dat)))]
sequon_tier1 <- colnames(dat)[grepl("is.sequon.tier1",colnames(dat))]
numSequon_tier1 <- colnames(dat)[grepl("num.sequons",colnames(dat))]
lengthHypervariable_tier1 <- colnames(dat)[grepl("length.hypervariable",colnames(dat))]
electrochemicalCharge_tier1 <- colnames(dat)[grepl("charge",colnames(dat))]
cysteineCount_tier1 <- colnames(dat)[grepl("cysteine.count",colnames(dat))]
temp <- select(dat, all_of(c(numSequon_tier1,lengthHypervariable_tier1,
electrochemicalCharge_tier1, cysteineCount_tier1 )))
library(furniture)
install.packages("furniture")
library(furniture)
table1(temp)
install.packages("boot")
temp <- select(filter(dat, eventInd==1), all_of(c(numSequon_tier1,lengthHypervariable_tier1,
electrochemicalCharge_tier1, cysteineCount_tier1 )))
for(var in colnames(temp)){
print(var)
table(dat[,var])
}
table(temp[,var])
for(var in colnames(temp)){
print(var)
table(temp[,var])
}
for(var in colnames(temp)){
print(var)
print(table(temp[,var]))
}
for(var in colnames(temp)){
print(var)
print(table(temp[,var]))
}
alvacMatch_tier1
20/1.5
# Purpose: Westfall and Young permutation-based multiplicity adjustment for sieve test p-values
#          The SAP states that p-values are calculated for the vaccine vs. placebo comparison.
# Method:  Westfall and Young (1993)
#          Juraska and Gilbert (Biometrics, 2013)
#          R package sievePH, version 1.0.1 on CRAN
#          Lunn and McNeil (1995)
# Input:   702 primary endpoints,  sequence features specified in the sieve SAP that are to be adjusted in multiple comparison
# Output:  A list with each component being a vector of sieve test p-values for the analyzed marks from a single permutation of the mark variable.
# Author:  Li Li
rm(list=ls(all=TRUE))
#p.adj.perm2 needs update
# Setting directory paths -------------------------------------------------
library(here)
rm(list=ls(all=TRUE))
here::i_am("702sieve/rootDir.R")
repoDir <- here::here()
dataDir <- file.path(repoDir, "data")
codeDir <- file.path(repoDir, "702sieve/code/westfallYoung")
outputDir <- file.path(repoDir, "702sieve/code/westfallYoung/output")
figureDir <- file.path(repoDir, "702sieve/figures/westfallYoung")
tableDir <- file.path(repoDir, "702sieve/tables/westfallYoung")
source(file.path(codeDir,"lunnMcneil.R"))
source(file.path(codeDir,"p.adj.perm2.R"))
library(sievePH)
library(tidyverse)
library(plyr)
####################################################################################
#this section of code is the same with sieveBinaryMain.R
source(file.path(repoDir, "702sieve/code/common.R"))
dat <- read.csv(file.path(dataDir, datFile)) %>%
mutate(tx=as.numeric(TRT01P=="T1"),
lineageLabel = as.numeric(transmitted.founder.status.tier2=="Multi"),
eventTime = HIV24fu,
eventInd = HIV24)
alvacMatch_tier1 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier1",colnames(dat))]
alvacMatch_tier1
alvacMatch_tier2
alvacMatch_tier1 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier1",colnames(dat))]
c1086match_tier1 <- colnames(dat)[grepl("1mer.1086.match.tier1",colnames(dat))]
cTV1match_tier1 <- colnames(dat)[grepl("1mer.TV1.match.tier1",colnames(dat))]
posIsAA_tier1 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier1",colnames(dat)) &(!grepl("is.sequon.tier1",colnames(dat)))]
alvacMatch_tier2 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier2",colnames(dat))]
c1086match_tier2 <- colnames(dat)[grepl("1mer.1086.match.tier2",colnames(dat))]
cTV1match_tier2 <- colnames(dat)[grepl("1mer.TV1.match.tier2",colnames(dat))]
posIsAA_tier2 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier2",colnames(dat)) &(!grepl("is.sequon.tier2",colnames(dat)))]
alvacMatch_tier2
# Purpose: Westfall and Young permutation-based multiplicity adjustment for sieve test p-values
#          The SAP states that p-values are calculated for the vaccine vs. placebo comparison.
# Method:  Westfall and Young (1993)
#          Juraska and Gilbert (Biometrics, 2013)
#          R package sievePH, version 1.0.1 on CRAN
#          Lunn and McNeil (1995)
# Input:   702 primary endpoints,  sequence features specified in the sieve SAP that are to be adjusted in multiple comparison
# Output:  A list with each component being a vector of sieve test p-values for the analyzed marks from a single permutation of the mark variable.
# Author:  Li Li
rm(list=ls(all=TRUE))
#p.adj.perm2 needs update
# Setting directory paths -------------------------------------------------
library(here)
rm(list=ls(all=TRUE))
here::i_am("702sieve/rootDir.R")
repoDir <- here::here()
dataDir <- file.path(repoDir, "data")
codeDir <- file.path(repoDir, "702sieve/code/westfallYoung")
outputDir <- file.path(repoDir, "702sieve/code/westfallYoung/output")
figureDir <- file.path(repoDir, "702sieve/figures/westfallYoung")
tableDir <- file.path(repoDir, "702sieve/tables/westfallYoung")
source(file.path(codeDir,"lunnMcneil.R"))
source(file.path(codeDir,"p.adj.perm2.R"))
library(sievePH)
library(tidyverse)
library(plyr)
####################################################################################
#this section of code is the same with sieveBinaryMain.R
source(file.path(repoDir, "702sieve/code/common.R"))
dat <- read.csv(file.path(dataDir, datFile)) %>%
mutate(tx=as.numeric(TRT01P=="T1"),
lineageLabel = as.numeric(transmitted.founder.status.tier2=="Multi"),
eventTime = HIV24fu,
eventInd = HIV24)
alvacMatch_tier1 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier1",colnames(dat))]
c1086match_tier1 <- colnames(dat)[grepl("1mer.1086.match.tier1",colnames(dat))]
cTV1match_tier1 <- colnames(dat)[grepl("1mer.TV1.match.tier1",colnames(dat))]
posIsAA_tier1 <- colnames(dat)[grepl(".is.",colnames(dat)) & grepl("hxb2",colnames(dat)) & grepl("tier1",colnames(dat)) &(!grepl("is.sequon.tier1",colnames(dat)))]
alvacMatch_tier2 <-  colnames(dat)[grepl("1mer.96ZM651.match.tier2",colnames(dat))]
alvacMatch_tier1
c1086match_tier1
posIsAA_tier1
cysteineCount_tier1
cysteineCount_tier1 <- colnames(dat)[grepl("cysteine.count",colnames(dat))]
cysteineCount_tier1
alvacMatch_tier1
